-- Static analysis --

- Information -
The usuals command to verify everything, `iZ``iI` `iE` `ii` `iS` `afl`
No protection, few function import, no export, only main function, dynamically linked

- What it does -
visual graph mode, tiny print representation to understand the code flow at first
Then comment each block and rename local variables, and fold them one by one
The code flow is an infinite loop
It iterate over all char in a buffer to mask them with 0x20 xor, then call printf(buffer) and exit(0)

- Vulnerability -
The only block out is a printf() on a buffer we control up to 100 byte, so we have a fmt vulnerability
But the stack frame is too big for a regular overflow
So now how to exploit, my initial understanding is that we can do almost anything
-> shellcode injection: I think ? by storing it in an env variable and writing it at oldeip
-> ret2libc: since there is enough space to write it and the offset are 'static'
-> GoT overwrite: with the printf we overwrite exit, and right after exit will be called
My issues are with got overwrite how to pass arg to new functions
and with the other two how to return to it since there is no return call, but one issue at a time

- Decrypt -
The crypt in main will mask our input with xor 0x20 on each char
So before sending it once we have our payload we must remenber to prevently xor it

01011001
00100000 xor 0x20
--------
01111001
00100000 xor 0x20
--------
01011001

We can see with a random value, even if it was intuitive, that 2 xor cancel themself
so we xor 0x20 for caps before sending it so the crypt in the main will give us our original input
While playing with the exploit i quickly notice xor 0x20 is used to make caps lowercase and vice versa
I researched it a bit and found an article called the oldest ascii tricks in the book
Basically make a lowercase char uppercase with an and, the opposite with an or, and toggle between them with a xor 0x20

- Exploit ideas -
I was thinking of going the ret2libc route, but i realized whats following the printf isnt a return but an exit
perhaps i also have to overwrite the got for exit to a custom memory, to where im gonna store the ret2libc
Or perhaps i could overwrite it to point to a ret gadget so the ret2libc could work after the pop
But it all seem tedious, if i have to overwrite the got anyway lets write it to a custom addr, that contains a shellcode

- Exploit -
We need info, lets get them in gdb this time:
- A shellcode, i will use a standard 23byte long shellcode execve("/bin/sh")
- The got address of exit, the one to overwrite `x exit@plt` (jmp addr) `x addr` to verify
- The address to where the shellcode will be stored
Im thinking to put the shellcode in the buffer -> `p $esp+0x28`
After the format string tho, so we'll add nopslide and calculate offset ($esp+0x50)

Fuzzing the printf gives us the relative position of the buffer to printf, its 10
Since its 32bit memory cell its 40 away from the printf, and considering the buffer lives at esp+0x28 it make perfect sens
So now we have the relative and absolute vaddr of our buffer, and the remaining info
Lets write all of this at the correct place with fmt exploit now

My payload to overwrite the got with printf did work, im sending it on the right address at the buffer after our printf, but it segv..
While debugging i found out that my shellcode as a string itself is being modified, because some of the bytes are getting xor 20
If this was a true togglecase i would xor 20 my shellcode before sending it in my payload, but here its only a lowercase() when its uppercase
I also tried to add a \0 before, so that the len (scasb) would be tricked, and it seems to work in gdb but not outside so since i cant figure it out
im gonna put the shellcode in an env variable, and modify my printf to make it write to this address after finding it with the same technique
At least since there is no size restriction here i can make my nopslide bigger to avoid having to be precise

`python /tmp/exploit.py` with first uncommented redirect /tmp/shellcode;`export SHELLCODE=$(cat /tmp/shellcode)`
`python /tmp/exploit.py > /tmp/fmt_expl` with second uncommented; `cat /tmp/fmt_expl - | ./level05`

In hindsight the stack approach was way better anyway due to the nop-sled
